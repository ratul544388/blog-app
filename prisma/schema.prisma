generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique
  name     String
  email    String @unique
  imageUrl String

  isAdmin  Boolean @default(false)
  isEditor Boolean @default(false)

  blogs    Blog[]
  votes    Vote[]
  comments Comment[]
}

model Blog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  title       String
  description String
  image       String
  category    String

  isEditorChoice Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  votes    Vote[]
}

model Vote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  isCommentVote Boolean @default(false)

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId

  type VoteType
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  body String

  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  votes Vote[]

  isPinned Boolean @default(false)
  isEdited Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replyToId String?   @db.ObjectId
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
}

enum VoteType {
  UP
  DOWN
}
